{
  "name": "date-expression-input-form",
  "type": "registry:ui",
  "dependencies": [
    "yeezy-dates"
  ],
  "registryDependencies": [
    "input",
    "button",
    "form",
    "sonner"
  ],
  "files": [
    {
      "type": "registry:ui",
      "content": "\"use client\";\n\nimport * as z from \"zod\";\nimport * as React from \"react\";\nimport { toast } from \"sonner\";\nimport { parseDate } from \"yeezy-dates\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\n\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormMessage,\n} from \"@/components/ui/form\";\n\ninterface DateSuggestion {\n  label: string;\n  date: Date;\n}\n\nconst formSchema = z.object({\n  dateExpression: z.string().min(1, \"Please enter a date expression\"),\n  dateValue: z.string().optional(),\n});\n\nexport default function DateExpressionInputForm() {\n  const [suggestions, setSuggestions] = React.useState<DateSuggestion[]>([]);\n  const [selectedDate, setSelectedDate] = React.useState<DateSuggestion | null>(\n    null\n  );\n  const [focusedIndex, setFocusedIndex] = React.useState<number>(-1);\n  const suggestionsRef = React.useRef<HTMLDivElement>(null);\n  const inputRef = React.useRef<HTMLInputElement>(null);\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      dateExpression: \"\",\n      dateValue: \"\",\n    },\n  });\n\n  const handleInputChange = React.useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      const input = e.target.value;\n      form.setValue(\"dateExpression\", input);\n      form.setValue(\"dateValue\", \"\");\n      setSelectedDate(null);\n      setFocusedIndex(-1);\n      if (input.trim()) {\n        const results = parseDate(input);\n        setSuggestions(results);\n      } else {\n        setSuggestions([]);\n      }\n    },\n    [form]\n  );\n\n  const handleSuggestionClick = React.useCallback(\n    (suggestion: DateSuggestion) => {\n      form.setValue(\"dateExpression\", suggestion.label);\n      form.setValue(\"dateValue\", suggestion.date.toISOString());\n      setSelectedDate(suggestion);\n      setSuggestions([]);\n      setFocusedIndex(-1);\n    },\n    [form]\n  );\n\n  const handleKeyDown = React.useCallback(\n    (e: React.KeyboardEvent<HTMLInputElement>) => {\n      if (!suggestions.length) return;\n\n      switch (e.key) {\n        case \"ArrowDown\":\n          e.preventDefault();\n          setFocusedIndex((prev) =>\n            prev < suggestions.length - 1 ? prev + 1 : prev\n          );\n          break;\n        case \"ArrowUp\":\n          e.preventDefault();\n          setFocusedIndex((prev) => (prev > 0 ? prev - 1 : prev));\n          break;\n        case \"Enter\":\n          e.preventDefault();\n          if (focusedIndex >= 0 && focusedIndex < suggestions.length) {\n            handleSuggestionClick(suggestions[focusedIndex]);\n          }\n          break;\n        case \"Escape\":\n          setSuggestions([]);\n          setFocusedIndex(-1);\n          inputRef.current?.blur();\n          break;\n      }\n    },\n    [suggestions, focusedIndex, handleSuggestionClick]\n  );\n\n  const onSubmit = React.useCallback(\n    (data: z.infer<typeof formSchema>) => {\n      if (selectedDate) {\n        toast.success(\"Date selected\", {\n          description: `Expression: ${\n            data.dateExpression\n          }\\nDate: ${selectedDate.date.toLocaleString()}`,\n        });\n      }\n    },\n    [selectedDate]\n  );\n\n  return (\n    <div className=\"relative w-full space-y-2 md:w-[400px]\">\n      <p\n        className=\"text-muted-foreground mt-2 text-xs\"\n        role=\"region\"\n        aria-live=\"polite\"\n      >\n        Built with{\" \"}\n        <a\n          className=\"hover:text-foreground underline\"\n          href=\"https://yeezy-dates.vercel.app/\"\n          target=\"_blank\"\n          rel=\"noopener nofollow\"\n        >\n          yeezy-dates\n        </a>\n      </p>\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-2\">\n          <FormField\n            control={form.control}\n            name=\"dateExpression\"\n            render={({ field }) => (\n              <FormItem>\n                <FormControl>\n                  <Input\n                    ref={inputRef}\n                    placeholder=\"Enter date expression like: 5 days ago, tomorrow at 1am\"\n                    value={field.value}\n                    onChange={handleInputChange}\n                    onKeyDown={handleKeyDown}\n                    role=\"combobox\"\n                    aria-expanded={suggestions.length > 0}\n                    aria-controls=\"date-suggestions\"\n                    aria-activedescendant={\n                      focusedIndex >= 0\n                        ? `suggestion-${focusedIndex}`\n                        : undefined\n                    }\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          <FormField\n            control={form.control}\n            name=\"dateValue\"\n            render={({ field }) => (\n              <FormItem className=\"hidden\">\n                <FormControl>\n                  <Input type=\"hidden\" {...field} />\n                </FormControl>\n              </FormItem>\n            )}\n          />\n\n          {selectedDate && <Button type=\"submit\">Submit</Button>}\n        </form>\n      </Form>\n\n      {suggestions.length > 0 && (\n        <div\n          ref={suggestionsRef}\n          id=\"date-suggestions\"\n          role=\"listbox\"\n          className=\"absolute left-0 right-0 top-[calc(100%-0.25rem)] z-50 overflow-hidden rounded-md border shadow-[0_2px_4px_rgba(0,0,0,0.1)]\"\n        >\n          <div className=\"max-h-[300px] overflow-y-auto py-1\">\n            {suggestions.map((suggestion, index) => (\n              <button\n                key={index}\n                id={`suggestion-${index}`}\n                role=\"option\"\n                aria-selected={focusedIndex === index}\n                onClick={() => handleSuggestionClick(suggestion)}\n                className={`flex w-full cursor-pointer justify-between px-4 py-2 text-left ${\n                  focusedIndex === index ? \"bg-accent\" : \"hover:bg-accent\"\n                }`}\n              >\n                <span className=\"text-sm\">{suggestion.label}</span>\n                <span className=\"text-sm text-muted-foreground\">\n                  {suggestion.date\n                    .toLocaleString(undefined, {\n                      day: \"2-digit\",\n                      month: \"short\",\n                      year: \"numeric\",\n                      hour: \"2-digit\",\n                      minute: \"2-digit\",\n                      hour12: true,\n                    })\n                    .replace(\",\", \"\")}\n                </span>\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n",
      "path": "ui/date-expression-input-form.tsx",
      "target": "components/ui/date-expression-input-form.tsx"
    }
  ]
}