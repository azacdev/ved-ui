{
  "name": "phone-input-form",
  "type": "registry:ui",
  "dependencies": [
    "react-phone-number-input"
  ],
  "registryDependencies": [
    "button",
    "form",
    "sonner"
  ],
  "files": [
    {
      "type": "registry:ui",
      "content": "\"use client\";\n\nimport * as z from \"zod\";\nimport { useId } from \"react\";\nimport type React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport flags from \"react-phone-number-input/flags\";\nimport * as RPNInput from \"react-phone-number-input\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { ChevronDownIcon, PhoneIcon } from \"lucide-react\";\nimport { toast } from \"sonner\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\n\nconst formSchema = z.object({\n  phoneNumber: z\n    .string()\n    .min(1, \"Phone number is required\")\n    .max(15, \"Phone number is too long\")\n    .refine((val) => RPNInput.isValidPhoneNumber(val), {\n      message: \"Invalid phone number\",\n    })\n    .refine(\n      (val) => {\n        // Remove all non-digit characters for length check\n        const digits = val.replace(/\\D/g, \"\");\n        return digits.length >= 8 && digits.length <= 15;\n      },\n      {\n        message: \"Phone number must be between 8 and 15 digits\",\n      }\n    ),\n});\n\nexport default function PhoneInputForm() {\n  const id = useId();\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      phoneNumber: \"\",\n    },\n  });\n\n  async function onSubmit(values: z.infer<typeof formSchema>) {\n    toast.success(\"Phone number submitted successfully!\", {\n      description: `Submitted: ${values.phoneNumber}`,\n    });\n  }\n\n  return (\n    <Form {...form}>\n      <form\n        onSubmit={form.handleSubmit(onSubmit)}\n        className=\"space-y-4 w-full max-w-sm\"\n      >\n        <FormField\n          control={form.control}\n          name=\"phoneNumber\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel htmlFor={id}>Phone number</FormLabel>\n              <FormControl>\n                <RPNInput.default\n                  className=\"flex rounded-md shadow-xs\"\n                  international\n                  flagComponent={FlagComponent}\n                  countrySelectComponent={CountrySelect}\n                  inputComponent={PhoneInput}\n                  id={id}\n                  placeholder=\"Enter phone number\"\n                  value={field.value}\n                  onChange={(value) => field.onChange(value ?? \"\")}\n                  limitMaxLength={true}\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button\n          type=\"submit\"\n          className=\"w-full\"\n          disabled={form.formState.isSubmitting}\n        >\n          {form.formState.isSubmitting ? \"Submitting...\" : \"Submit\"}\n        </Button>\n\n        <p\n          className=\"text-muted-foreground mt-2 text-xs\"\n          role=\"region\"\n          aria-live=\"polite\"\n        >\n          Enter a valid phone number (8-15 digits). Built with{\" \"}\n          <a\n            className=\"hover:text-foreground underline\"\n            href=\"https://gitlab.com/catamphetamine/react-phone-number-input\"\n            target=\"_blank\"\n            rel=\"noreferrer noopener nofollow\"\n          >\n            react-phone-number-input\n          </a>{\" \"}\n          and inspired by{\" \"}\n          <a\n            className=\"hover:text-foreground underline\"\n            href=\"https://originui.com/input\"\n            target=\"_blank\"\n            rel=\"noopener nofollow\"\n          >\n            origin/ui\n          </a>\n        </p>\n      </form>\n    </Form>\n  );\n}\n\nconst PhoneInput = ({ className, ...props }: React.ComponentProps<\"input\">) => {\n  return (\n    <Input\n      data-slot=\"phone-input\"\n      className={cn(\n        \"-ms-px rounded-s-none shadow-none focus-visible:z-10\",\n        className\n      )}\n      {...props}\n    />\n  );\n};\n\nPhoneInput.displayName = \"PhoneInput\";\n\ntype CountrySelectProps = {\n  disabled?: boolean;\n  value: RPNInput.Country;\n  onChange: (value: RPNInput.Country) => void;\n  options: { label: string; value: RPNInput.Country | undefined }[];\n};\n\nconst CountrySelect = ({\n  disabled,\n  value,\n  onChange,\n  options,\n}: CountrySelectProps) => {\n  const handleSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    onChange(event.target.value as RPNInput.Country);\n  };\n\n  return (\n    <div className=\"border-input bg-background text-muted-foreground focus-within:border-ring focus-within:ring-ring/50 hover:bg-accent hover:text-foreground has-aria-invalid:border-destructive/60 has-aria-invalid:ring-destructive/20 dark:has-aria-invalid:ring-destructive/40 relative inline-flex items-center self-stretch rounded-s-md border py-2 ps-3 pe-2 transition-[color,box-shadow] outline-none focus-within:z-10 focus-within:ring-[3px] has-disabled:pointer-events-none has-disabled:opacity-50\">\n      <div className=\"inline-flex items-center gap-1\" aria-hidden=\"true\">\n        <FlagComponent country={value} countryName={value} aria-hidden=\"true\" />\n        <span className=\"text-muted-foreground/80\">\n          <ChevronDownIcon size={16} aria-hidden=\"true\" />\n        </span>\n      </div>\n      <select\n        disabled={disabled}\n        value={value}\n        onChange={handleSelect}\n        className=\"absolute inset-0 text-sm opacity-0\"\n        aria-label=\"Select country\"\n      >\n        <option key=\"default\" value=\"\">\n          Select a country\n        </option>\n        {options\n          .filter((x) => x.value)\n          .map((option, i) => (\n            <option key={option.value ?? `empty-${i}`} value={option.value}>\n              {option.label}{\" \"}\n              {option.value &&\n                `+${RPNInput.getCountryCallingCode(option.value)}`}\n            </option>\n          ))}\n      </select>\n    </div>\n  );\n};\n\nconst FlagComponent = ({ country, countryName }: RPNInput.FlagProps) => {\n  const Flag = flags[country];\n\n  return (\n    <span className=\"w-5 overflow-hidden rounded-sm\">\n      {Flag ? (\n        <Flag title={countryName} />\n      ) : (\n        <PhoneIcon size={16} aria-hidden=\"true\" />\n      )}\n    </span>\n  );\n};\n",
      "path": "ui/phone-input-form.tsx",
      "target": "components/ui/phone-input-form.tsx"
    }
  ]
}