{
  "name": "tag-input-form",
  "type": "registry:ui",
  "registryDependencies": [
    "input",
    "button",
    "form",
    "sonner",
    "badge"
  ],
  "files": [
    {
      "type": "registry:ui",
      "content": "\"use client\";\n\nimport { z } from \"zod\";\nimport type React from \"react\";\nimport { toast } from \"sonner\";\nimport { X } from \"lucide-react\";\nimport { useFieldArray, useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\n\nconst FormSchema = z.object({\n  tags: z.array(\n    z.string().min(1, {\n      message:\n        \"A tag, Morty! I need a tag! Don't just stand there with your mouth open!\",\n    })\n  ),\n});\n\ntype FormValues = z.infer<typeof FormSchema>;\n\nconst initialTags = [\n  \"Plumbus Care\",\n  \"Interdimensional Cable\",\n  \"Gazorpazorpfield\",\n];\n\nexport default function TagInputForm() {\n  const form = useForm<FormValues>({\n    resolver: zodResolver(FormSchema),\n    defaultValues: {\n      tags: initialTags,\n    },\n  });\n\n  const { fields, append, remove } = useFieldArray<FormValues>({\n    name: \"tags\" as never,\n    control: form.control,\n  });\n\n  function onSubmit(data: FormValues) {\n    console.log(\"Tags\", data.tags);\n\n    toast.success(\"You did it, Morty!\", {\n      description: `Submitted ${data.tags.length} tags to the Council of Ricks`,\n    });\n  }\n\n  const handleAddTag = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      const input = e.currentTarget;\n      const value = input.value.trim();\n\n      if (value) {\n        append(value as never);\n        input.value = \"\";\n      }\n    }\n  };\n\n  return (\n    <div className=\"space-y-2\">\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n          <FormField\n            control={form.control}\n            name=\"tags\"\n            render={() => (\n              <FormItem>\n                <FormLabel>\n                  Input with tags (for, like, important stuff, Morty!)\n                </FormLabel>\n                <div className=\"flex gap-2\">\n                  <FormControl>\n                    <Input\n                      placeholder=\"Press Enter to add a tag, or don't. Whatever, I'm Rick.\"\n                      onKeyDown={handleAddTag}\n                    />\n                  </FormControl>\n                </div>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          <div className=\"flex flex-wrap gap-2\">\n            {fields.map((field, index) => (\n              <Badge\n                key={field.id}\n                variant=\"outline\"\n                className=\"h-7 gap-1 px-2 text-xs font-medium\"\n              >\n                {form.getValues(`tags.${index}`)}\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"h-4 w-4 p-0 hover:bg-transparent hover:cursor-pointer\"\n                  onClick={() => remove(index)}\n                >\n                  <X className=\"h-3 w-3\" />\n                  <span className=\"sr-only\">Remove tag</span>\n                </Button>\n              </Badge>\n            ))}\n          </div>\n          <Button type=\"submit\">Submit Tags</Button>\n        </form>\n      </Form>\n      <p\n        className=\"text-xs text-muted-foreground\"\n        role=\"region\"\n        aria-live=\"polite\"\n      >\n        (*I* can't be bothered to write everything from scratch)\n      </p>\n    </div>\n  );\n}\n",
      "path": "ui/tag-input-form.tsx",
      "target": "components/ui/tag-input-form.tsx"
    }
  ]
}